// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  Like      Like[]
  Cart      Cart[]
  Order     Order[]

  @@map("users")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]

  @@map("roles")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Decimal     @db.Decimal(10, 2)
  is_active   Boolean     @default(true)
  stock       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  Int
  Images      Images[]
  Like        Like[]
  CartItems   CartItems[]
  OrderItem   OrderItem[]

  @@map("products")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@map("categories")
}

model Images {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?

  @@map("images")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  Product   Product  @relation(fields: [productId], references: [id])
  productId Int

  @@unique([userId, productId])
  @@map("likes")
}

model Cart {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  isDraft   Boolean     @default(true)
  updatedAt DateTime    @updatedAt
  User      User        @relation(fields: [userId], references: [id])
  userId    Int
  CartItems CartItems[]

  @@map("carts")
}

model CartItems {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  Product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int      @default(1)

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id        Int         @id @default(autoincrement())
  address   String
  status    Status      @default(processed)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  User      User        @relation(fields: [userId], references: [id])
  userId    Int
  OrderItem OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  Product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)

  @@unique([orderId, productId])
  @@map("order_items")
}

enum Status {
  processed
  delivered
}
